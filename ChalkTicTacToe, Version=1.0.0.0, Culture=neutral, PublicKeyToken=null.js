/* Generated by JSIL v0.7.6 build 22527. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("ChalkTicTacToe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("ChalkTicTacToe.Program"), "Main", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.String")])]));

JSIL.DeclareNamespace("ChalkTicTacToe");
(function AnimatedTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };

  function AnimatedTexture__ctor (origin, rotation, scale, depth) {
    this.Origin = JSIL.Coalesce(origin, $T01().get_Zero().MemberwiseClone()).MemberwiseClone();
    this.Rotation = +rotation;
    this.Scale = +scale;
    this.Depth = +depth;
    this.drawFirstFrame = false;
  };

  function AnimatedTexture_DrawFrame$00 (batch, screenPos) {
    this.DrawFrame(batch, this.Frame, screenPos);
  };

  function AnimatedTexture_DrawFrame$01 (batch, frame, screenPos) {
    var sourcerect = new ($T04())(((this.m_currentFrame.X * this.m_frameSize.X) | 0), ((this.m_currentFrame.Y * this.m_frameSize.Y) | 0), this.m_frameSize.X, this.m_frameSize.Y);
    batch.DrawScaleF(
      this.m_texture, 
      screenPos, 
      sourcerect.MemberwiseClone(), 
      $T05().get_White(), 
      this.Rotation, 
      this.Origin, 
      this.Scale, 
      $T06().None, 
      this.Depth
    );
    this.drawFirstFrame = true;
  };

  function AnimatedTexture_get_IsPaused () {
    return this.Paused;
  };

  function AnimatedTexture_Load (texture, frameSize, sheetSize, currentFrame, framesPerSec, sound) {
    this.framecount = 6;
    this.m_frameSize = frameSize;
    this.m_sheetSize = sheetSize;
    this.m_currentFrame = JSIL.Coalesce(currentFrame, new ($T08())(0, 0)).MemberwiseClone();
    this.m_texture = texture;
    this.m_sound = sound;
    this.TimePerFrame = +(1 / framesPerSec);
    this.Frame = 0;
    this.TotalElapsed = +0;
    this.Paused = false;
  };

  function AnimatedTexture_Pause () {
    this.Paused = true;
  };

  function AnimatedTexture_Play () {
    this.Paused = false;
  };

  function AnimatedTexture_Reset () {
    this.Frame = 0;
    this.TotalElapsed = +0;
  };

  function AnimatedTexture_Stop () {
    this.Pause();
    this.Reset();
  };

  function AnimatedTexture_UpdateFrame (elapsed) {
    if (!this.Paused) {
      this.TotalElapsed += +elapsed;
      if (!((this.TotalElapsed <= this.TimePerFrame) || !this.drawFirstFrame)) {
        if (!((this.Frame !== 0) || (this.m_sound === null))) {
          this.m_sound.Play();
        }
        this.Frame = ((this.Frame + 1) | 0);
        this.Frame = ((this.Frame % this.framecount) | 0);
        this.TotalElapsed -= +this.TimePerFrame;
        this.m_currentFrame.X = ((this.m_currentFrame.X + 1) | 0);
        if (this.m_currentFrame.X > this.m_sheetSize.X) {
          this.m_currentFrame.X = 0;
          this.m_currentFrame.Y = ((this.m_currentFrame.Y + 1) | 0);
          if (this.m_currentFrame.Y > this.m_sheetSize.Y) {
            this.m_currentFrame.Y = 0;
          }
        }
      }
      if (!(!this.drawFirstFrame || (this.Frame !== 5))) {
        this.Pause();
      }
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.AnimatedTexture", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $.Single, 
          $.Single, $.Single
        ], []), 
      AnimatedTexture__ctor
    );

    $.Method({Static:false, Public:true }, "DrawFrame", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      AnimatedTexture_DrawFrame$00
    );

    $.Method({Static:false, Public:true }, "DrawFrame", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")
        ], []), 
      AnimatedTexture_DrawFrame$01
    );

    $.Method({Static:false, Public:true }, "get_IsPaused", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      AnimatedTexture_get_IsPaused
    );

    $.Method({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Point"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Point"), $asm06.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
          $.Single, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")
        ], []), 
      AnimatedTexture_Load
    );

    $.Method({Static:false, Public:true }, "Pause", 
      new JSIL.MethodSignature(null, [], []), 
      AnimatedTexture_Pause
    );

    $.Method({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [], []), 
      AnimatedTexture_Play
    );

    $.Method({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], []), 
      AnimatedTexture_Reset
    );

    $.Method({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [], []), 
      AnimatedTexture_Stop
    );

    $.Method({Static:false, Public:true }, "UpdateFrame", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      AnimatedTexture_UpdateFrame
    );

    $.Field({Static:false, Public:false}, "framecount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "TimePerFrame", $.Single); 
    $.Field({Static:false, Public:false}, "Frame", $.Int32); 
    $.Field({Static:false, Public:false}, "TotalElapsed", $.Single); 
    $.Field({Static:false, Public:false}, "Paused", $.Boolean); 
    $.Field({Static:false, Public:false}, "drawFirstFrame", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_frameSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "m_sheetSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "m_currentFrame", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:true }, "Rotation", $.Single); 
    $.Field({Static:false, Public:true }, "Scale", $.Single); 
    $.Field({Static:false, Public:true }, "Depth", $.Single); 
    $.Field({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "m_sound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Property({Static:false, Public:true }, "IsPaused", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Button$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.ChalkTicTacToe.Button_BState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Boolean)) ();
  };

  function Button__ctor (x, y, texture, color_up, color_hover, color_down) {
    this.m_width = texture.get_Width();
    this.m_height = texture.get_Height();
    this.m_rectangle = new ($T03())(x, y, this.m_width, this.m_height);
    this.m_color = color_up.MemberwiseClone();
    this.m_colorUp = color_up.MemberwiseClone();
    this.m_colorHover = color_hover;
    this.m_colorDown = color_down;
    this.m_texture = texture;
    this.m_state = $T04().UP;
  };

  function Button_Draw (spriteBatch, gameTime) {
    spriteBatch.DrawRect(this.m_texture, this.m_rectangle, this.m_color);
  };

  function Button_Touched (touch) {
    this.m_state = $T04().UP;
    this.m_color = this.m_colorUp.MemberwiseClone();
    if (this.m_rectangle.Contains(
        touch.get_X(), 
        touch.get_Y()
      )) {
      this.m_state = $T04().HOVER;
      this.m_color = this.m_colorHover.MemberwiseClone();
      if (touch.get_LeftButton() === $T08().Pressed) {
        this.m_color = this.m_colorDown.MemberwiseClone();
        this.m_state = $T04().DOWN;
      }
      var result = true;
    } else {
      this.m_color = this.m_colorUp.MemberwiseClone();
      result = false;
    }
    return result;
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.Button", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      Button__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Button_Draw
    );

    $.Method({Static:false, Public:true }, "Touched", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")], []), 
      Button_Touched
    );

    $.Field({Static:false, Public:true }, "m_width", $.Int32); 
    $.Field({Static:false, Public:true }, "m_height", $.Int32); 
    $.Field({Static:false, Public:true }, "m_color", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "m_colorUp", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "m_colorHover", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "m_colorDown", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "m_state", $asm00.TypeRef("ChalkTicTacToe.Button/BState")); 
    $.Field({Static:false, Public:true }, "m_texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "m_rectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "ChalkTicTacToe.Button/BState", false, {
    HOVER: 0, 
    UP: 1, 
    JUST_RELEASED: 2, 
    DOWN: 3
  }, false
);

(function Main$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.ChalkTicTacToe.Game1)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.ChalkTicTacToe.Button)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm00.ChalkTicTacToe.Button))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.ChalkTicTacToe.Button_BState)) ();
  };

  function Main__ctor (game) {
    this.m_menuButtons = JSIL.Array.New($T01(), 4);
    this.m_game = game;
    this.m_logo = this.m_game.get_Content().Load$b1($T02())("sprites/MenuLogo");
    var x = ((((this.m_game.get_Window().get_ClientBounds().Width / 2) | 0) - 225) | 0);
    var y = ((((this.m_game.get_Window().get_ClientBounds().Height / 2) | 0) - 180) | 0);

    for (var i = 0; i < this.m_menuButtons.length; i = ((i + 1) | 0)) {
      var texture = null;
      switch (i) {
        case 0: 
          texture = this.m_game.get_Content().Load$b1($T02())("sprites/MenuOnePlayer");
          break;

        case 1: 
          texture = this.m_game.get_Content().Load$b1($T02())("sprites/MenuOnePlayer2");
          break;

        case 2: 
          texture = this.m_game.get_Content().Load$b1($T02())("sprites/MenuTwoPlayers");
          break;

        case 3: 
          texture = this.m_game.get_Content().Load$b1($T02())("sprites/MenuQuit");
          break;

      }
      this.m_menuButtons[i] = new ($T01())(x, ((y + 70) | 0), texture, $T08().get_White().MemberwiseClone(), $T08().get_Gainsboro().MemberwiseClone(), $T08().get_Gray().MemberwiseClone());
      y = ((y + 90) | 0);
    }
  };

  function Main_Draw (spriteBatch, gameTime) {
    spriteBatch.DrawRect(
      this.m_logo, 
      new ($T0B())(0, 0, this.m_logo.get_Width(), this.m_logo.get_Height()), 
      $T08().get_White()
    );

    for (var i = 0; i < this.m_menuButtons.length; i = ((i + 1) | 0)) {
      this.m_menuButtons[i].Draw(spriteBatch, gameTime);
    }
  };

  function Main_HandleTouch (touch) {

  $loop0: 
    for (var i = 0; i < this.m_menuButtons.length; i = ((i + 1) | 0)) {
      if (!(!this.m_menuButtons[i].Touched(touch) || (this.m_menuButtons[i].m_state !== $T0D().DOWN))) {
        this.m_game.handleMenuClick(i);
        break $loop0;
      }
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.Main", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("ChalkTicTacToe.Game1")], []), 
      Main__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Main_Draw
    );

    $.Method({Static:false, Public:true }, "HandleTouch", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")], []), 
      Main_HandleTouch
    );

    $.Constant({Static:true , Public:true }, "NUMBER_OF_BUTTONS", 4); 
    $.Constant({Static:true , Public:true }, "MODE1_ID", 0); 
    $.Constant({Static:true , Public:true }, "MODE1B_ID", 1); 
    $.Constant({Static:true , Public:true }, "MODE2_ID", 2); 
    $.Constant({Static:true , Public:true }, "QUIT_ID", 3); 
    $.Constant({Static:true , Public:true }, "BUTTON_HEIGHT", 90); 
    $.Constant({Static:true , Public:true }, "BUTTON_WIDTH", 450); 
    $.Field({Static:false, Public:false}, "m_menuButtons", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("ChalkTicTacToe.Button")])); 
    $.Field({Static:false, Public:false}, "m_logo", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_game", $asm00.TypeRef("ChalkTicTacToe.Game1")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Move$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.ChalkTicTacToe.AnimatedTexture)) ();
  };

  function Move__ctor (nX, nY, chPlayer, sprite) {
    this.m_nX = nX;
    this.m_nY = nY;
    this.m_chPlayer = chPlayer;
    this.m_sprite = sprite;
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.Move", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Char, $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")
        ], []), 
      Move__ctor
    );

    $.Field({Static:false, Public:true }, "m_chPlayer", $.Char); 
    $.Field({Static:false, Public:true }, "m_nX", $.Int32); 
    $.Field({Static:false, Public:true }, "m_nY", $.Int32); 
    $.Field({Static:false, Public:true }, "m_sprite", $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.ChalkTicTacToe.Game1)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm06.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("ChalkTicTacToe.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], []), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "ChalkTicTacToe.GameState", true, {
    IsPlaying: 0, 
    IsDraw: 1, 
    PlayerXWins: 2, 
    PlayerOWins: 3
  }, false
);

JSIL.MakeEnum(
  "ChalkTicTacToe.GameFlow", true, {
    MainMenu: 0, 
    GameStart: 1, 
    PlayerMove: 2, 
    ComputerMove: 3, 
    Results: 4
  }, false
);

JSIL.MakeEnum(
  "ChalkTicTacToe.GameMode", true, {
    OnePlayer: 0, 
    TwoPlayers: 1
  }, false
);

(function Game1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.ChalkTicTacToe.GameFlow)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.ChalkTicTacToe.GameMode)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.ChalkTicTacToe.Move)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.ChalkTicTacToe.Table)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.ChalkTicTacToe.AnimatedTexture)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Diagnostics.Debug)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.System.TimeSpan)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.ChalkTicTacToe.Main)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.ChalkTicTacToe.Score)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.ChalkTicTacToe.GameState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm00.ChalkTicTacToe.Move))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.ChalkTicTacToe.Move))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("ChalkTicTacToe.Table"), [$asm00.TypeRef("ChalkTicTacToe.Table")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Object")])], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("ChalkTicTacToe.Move")]), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("ChalkTicTacToe.Table"), [$asm06.TypeRef("System.Int32")]))) ();
  };

  function Game1__ctor () {
    this.m_eGameFlow = $T00().MainMenu;
    this.m_oPrevMouseState = $T01().GetState().MemberwiseClone();
    this.m_frameSize = new ($T02())(150, 150);
    this.m_gameMode = $T03().OnePlayer;
    this.m_currentMatchTime = +0;
    this.m_chComputer = "O";
    this.m_chPlayer = "X";
    this.m_increaseScore = true;
    $T04().prototype._ctor.call(this);
    this.m_graphics = new ($T05())(this);
    this.m_graphics.set_PreferredBackBufferWidth(800);
    this.m_graphics.set_PreferredBackBufferHeight(520);
    this.m_graphics.ApplyChanges();
    this.m_vTableCenter = $S00().Construct(500, 240);
    this.get_Content().set_RootDirectory("Content");
    this.set_IsMouseVisible(true);
    this.get_Window().set_Title("Tic Tac Toe");
    this.Reset();
  };

  function Game1_ComputerMove (chComputer) {
    var bestMove = new JSIL.BoxedVariable(null);
    var TestTable = $S01().Construct(this.m_Table);
    var s = +this.Minimax(
      TestTable, 
      /* ref */ bestMove, 
      -3.40282347E+38, 
      3.40282347E+38, 
      chComputer, 
      1
    );
    var spriteMark = new ($T0D())(null, 0, 1, 0.5);
    if (chComputer.charCodeAt(0) === this.m_chComputer.charCodeAt(0)) {
      var texture = this.m_Tex_O;
      var sound = this.m_soundO;
    } else {
      texture = this.m_Tex_X;
      sound = this.m_soundX;
    }
    spriteMark.Load(
      texture, 
      this.m_frameSize.MemberwiseClone(), 
      new ($T02())(2, 1), 
      null, 
      30, 
      sound
    );
    bestMove.get().m_sprite = spriteMark;
    $S02().CallStatic($T10(), "WriteLine", null, "bestMove {0}x{1} score: {2}", JSIL.Array.New($T11(), [bestMove.get().m_nX, bestMove.get().m_nY, s]));
    this.m_Table.ApplyMove(bestMove.get());
  };

  function Game1_Draw (gameTime) {
    var vCellSize = new ($T06())(), vXSize = new ($T06())(), vOSize = new ($T06())(), vGridPos = new ($T06())();
    this.get_GraphicsDevice().InternalClear($T14().get_CornflowerBlue());
    var elapsed = +$T0C().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
    this.m_spriteBatch.Begin();
    this.m_spriteBatch.Draw(
      this.m_Background, 
      $T06().get_Zero(), 
      $T14().get_White()
    );
    switch (this.m_eGameFlow.valueOf()) {
      case 0: 
        this.m_mainMenu.Draw(this.m_spriteBatch, gameTime);
        break;

      case 1: 
      case 2: 
      case 3: 
      case 4: 
        this.m_score.Draw(this.m_spriteBatch, gameTime);
        if (this.m_eGameFlow === $T00().GameStart) {
          this.m_score.DrawStartButton(this.m_spriteBatch, gameTime);
        } else {
          switch (this.m_Table.m_eState.valueOf()) {
            case 0: 
              if (this.m_currentPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) {
                this.m_score.DrawMessage(this.m_spriteBatch, gameTime, 0);
              } else {
                this.m_score.DrawMessage(this.m_spriteBatch, gameTime, 1);
              }
              break;

            case 1: 
              this.m_score.DrawMessage(this.m_spriteBatch, gameTime, 4);
              break;

            case 2: 
              this.m_score.DrawMessage(this.m_spriteBatch, gameTime, 2);
              break;

            case 3: 
              this.m_score.DrawMessage(this.m_spriteBatch, gameTime, 3);
              break;

          }
        }
        if (!(!((this.m_Table.m_eState === $T19().PlayerOWins) || 
              (this.m_Table.m_eState === $T19().PlayerXWins)) && (this.m_Table.m_eState !== $T19().IsDraw))) {
          this.m_score.DrawMenuButton(this.m_spriteBatch, gameTime);
        }
        this.m_spriteBatch.Draw(this.m_BackgroundGrid, $S00().Construct(280, 20), $T14().get_White());
        $T06().prototype._ctor.call(vCellSize, 
          $T0C().$Cast(this.m_GridCell.get_Width()), 
          $T0C().$Cast(this.m_GridCell.get_Height())
        );
        $T06().prototype._ctor.call(vXSize, $T0C().$Cast(this.m_frameSize.X), $T0C().$Cast(this.m_frameSize.Y));
        $T06().prototype._ctor.call(vOSize, $T0C().$Cast(this.m_frameSize.X), $T0C().$Cast(this.m_frameSize.Y));
        var vCorner = $T06().op_Subtraction(this.m_vTableCenter, $T06().op_MultiplyScalar(vCellSize, ($T0C().$Cast(this.m_Table.m_nSide) * 0.5)));

        for (var nY = 0; nY < this.m_Table.m_nSide; nY = ((nY + 1) | 0)) {

          for (var nX = 0; nX < this.m_Table.m_nSide; nX = ((nX + 1) | 0)) {
            $T06().prototype._ctor.call(vGridPos, $T0C().$Cast(nX), $T0C().$Cast(nY));
            var vFinalPos = $T06().op_Addition(vCorner, $T06().op_Multiply(vCellSize, vGridPos));
            this.m_spriteBatch.Draw(this.m_GridCell, vFinalPos, $T14().get_White());
            if (this.m_Table.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) {
              var vOffset = $T06().op_MultiplyScalarLeft(0.5, $T06().op_Subtraction(vCellSize, vXSize));
              var spriteMove = this.m_Table.m_achCells.Get(nX, nY).m_sprite;
              spriteMove.DrawFrame(this.m_spriteBatch, $T06().op_Addition(vFinalPos, vOffset));
              spriteMove.UpdateFrame(elapsed);
            }
            if (this.m_Table.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) === this.m_chComputer.charCodeAt(0)) {
              vOffset = $T06().op_MultiplyScalarLeft(0.5, $T06().op_Subtraction(vCellSize, vOSize));
              spriteMove = this.m_Table.m_achCells.Get(nX, nY).m_sprite;
              spriteMove.DrawFrame(this.m_spriteBatch, $T06().op_Addition(vFinalPos, vOffset));
              spriteMove.UpdateFrame(elapsed);
            }
          }
        }
        if (this.m_eGameFlow === $T00().Results) {
          if (!((this.m_Table.m_eState !== $T19().PlayerOWins) && (this.m_Table.m_eState !== $T19().PlayerXWins))) {
            var po = this.m_Table.CheckPlayerWins(this.m_chPlayer);
            if (po === null) {
              po = this.m_Table.CheckPlayerWins(this.m_chComputer);
            }
            var text = po;
            if (text !== null) {
              switch (text) {
                case "L0": 
                  this.m_spriteLineH.DrawFrame(this.m_spriteBatch, $S00().Construct(240, 70));
                  this.m_spriteLineH.UpdateFrame(elapsed);
                  break;

                case "L1": 
                  this.m_spriteLineH.DrawFrame(this.m_spriteBatch, $S00().Construct(250, 210));
                  this.m_spriteLineH.UpdateFrame(elapsed);
                  break;

                case "L2": 
                  this.m_spriteLineH.DrawFrame(this.m_spriteBatch, $S00().Construct(250, 360));
                  this.m_spriteLineH.UpdateFrame(elapsed);
                  break;

                case "C0": 
                  this.m_spriteLineV.DrawFrame(this.m_spriteBatch, $S00().Construct(385, 0));
                  this.m_spriteLineV.UpdateFrame(elapsed);
                  break;

                case "C1": 
                  this.m_spriteLineV.DrawFrame(this.m_spriteBatch, $S00().Construct(520, 0));
                  this.m_spriteLineV.UpdateFrame(elapsed);
                  break;

                case "C2": 
                  this.m_spriteLineV.DrawFrame(this.m_spriteBatch, $S00().Construct(670, 0));
                  this.m_spriteLineV.UpdateFrame(elapsed);
                  break;

                case "DL": 
                  this.m_spriteLineDL.DrawFrame(this.m_spriteBatch, $S00().Construct(340, 40));
                  this.m_spriteLineDL.UpdateFrame(elapsed);
                  break;

                case "DR": 
                  this.m_spriteLineDR.DrawFrame(this.m_spriteBatch, $S00().Construct(700, 65));
                  this.m_spriteLineDR.UpdateFrame(elapsed);
                  break;

              }
            }
          }
        }
        break;

    }
    this.m_spriteBatch.End();
    $T04().prototype.Draw.call(this, gameTime);
  };

  function Game1_handleMenuClick (id) {
    this.m_soundClick.Play();
    this.m_increaseScore = true;
    if (id === 0) {
      this.m_gameMode = $T03().OnePlayer;
      this.m_eGameFlow = $T00().GameStart;
      this.m_currentPlayer = this.m_chPlayer;
    } else if (id === 1) {
      this.m_gameMode = $T03().OnePlayer;
      this.m_eGameFlow = $T00().GameStart;
      this.m_currentPlayer = this.m_chComputer;
    } else if (id === 2) {
      this.m_gameMode = $T03().TwoPlayers;
      this.m_eGameFlow = $T00().GameStart;
      this.m_currentPlayer = this.m_chPlayer;
    } else if (id === 3) {
      this.Quit();
    }
  };

  function Game1_handleScoreMenuClick () {
    this.m_soundClick.Play();
    this.m_eGameFlow = $T00().MainMenu;
    this.m_score.ResetScore();
    this.Reset();
  };

  function Game1_handleScoreRematchClick () {
    this.m_eGameFlow = $T00().GameStart;
    this.Reset();
  };

  function Game1_handleScoreStartClick () {
    this.m_soundClick.Play();
    if (this.m_gameMode === $T03().OnePlayer) {
      if (this.m_currentPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) {
        this.m_eGameFlow = $T00().PlayerMove;
      } else {
        this.m_eGameFlow = $T00().ComputerMove;
      }
    } else {
      this.m_eGameFlow = $T00().PlayerMove;
    }
  };

  function Game1_Initialize () {
    $T04().prototype.Initialize.call(this);
  };

  function Game1_LoadContent () {
    this.m_spriteBatch = new ($T16())(this.get_GraphicsDevice());
    this.m_mainMenu = new ($T17())(this);
    this.m_score = new ($T18())(this);
    this.m_GridCell = this.get_Content().Load$b1($T0E())("sprites/BlackboardGridCell");
    this.m_Tex_X = this.get_Content().Load$b1($T0E())("sprites/SheetX");
    this.m_Tex_O = this.get_Content().Load$b1($T0E())("sprites/SheetO");
    this.m_Line = this.get_Content().Load$b1($T0E())("sprites/SheetLine");
    this.m_Background = this.get_Content().Load$b1($T0E())("sprites/Blackboard");
    this.m_BackgroundGrid = this.get_Content().Load$b1($T0E())("sprites/BlackboardGrid");
    this.m_spriteLineH = new ($T0D())(null, 0, 1, 0.5);
    this.m_spriteLineH.Load(
      this.m_Line, 
      new ($T02())(510, 35), 
      new ($T02())(2, 1), 
      null, 
      30, 
      null
    );
    this.m_spriteLineV = new ($T0D())(null, 45.55, 1, 0.5);
    this.m_spriteLineV.Load(
      this.m_Line, 
      new ($T02())(510, 35), 
      new ($T02())(2, 1), 
      null, 
      30, 
      null
    );
    this.m_spriteLineDL = new ($T0D())(null, 44.8, 1, 0.5);
    this.m_spriteLineDL.Load(
      this.m_Line, 
      new ($T02())(510, 35), 
      new ($T02())(2, 1), 
      null, 
      30, 
      null
    );
    this.m_spriteLineDR = new ($T0D())(null, 2.35, 1, 0.5);
    this.m_spriteLineDR.Load(
      this.m_Line, 
      new ($T02())(510, 35), 
      new ($T02())(2, 1), 
      null, 
      30, 
      null
    );
    this.m_soundX = this.get_Content().Load$b1($T0F())("sounds/SoundX");
    this.m_soundO = this.get_Content().Load$b1($T0F())("sounds/SoundO");
    this.m_soundClick = this.get_Content().Load$b1($T0F())("sounds/SoundClick");
  };

  function Game1_Minimax (TestTable, /* ref */ best, alpha, beta, chPlayer, depth) {
    var $temp00;
    var TmpMove = new JSIL.BoxedVariable(null);
    var opponent = ((chPlayer.charCodeAt(0) === this.m_chComputer.charCodeAt(0)) ? this.m_chPlayer : this.m_chComputer);
    best.set(null);
    var bestResult = +-10;
    if (TestTable.m_eState !== $T19().IsPlaying) {
      var result = +(TestTable.EvaluateTable(chPlayer) / $T0C().$Cast(depth));
    } else {
      var lMoves = $S03().Construct();
      TestTable.GetAvailableMoves(lMoves, chPlayer);

      for (var a$0 = lMoves._items, i$0 = 0, l$0 = lMoves._size; i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var move = a$0[i$0];
        var TestTable2 = $S01().Construct(TestTable);
        TestTable2.ApplyMove(move);
        alpha = +-this.Minimax(
          TestTable2, 
          /* ref */ TmpMove, 
          -beta, 
          -alpha, 
          opponent, 
          ((depth + 1) | 0)
        );
        if (beta <= alpha) {
          result = +alpha;
          return +result;
        }
        if (alpha > bestResult) {
          best.set(move);
          bestResult = +alpha;
        }
      }
      result = +bestResult;
    }
    return +result;
  };

  function Game1_PlayerMove (mouseState, chPlayer) {
    var vGridPos = new ($T06())();
    var vMousePos = $S00().Construct($T0C().$Cast(mouseState.get_X()), $T0C().$Cast(mouseState.get_Y()));
    var vCellSize = $S00().Construct($T0C().$Cast(this.m_GridCell.get_Width()), $T0C().$Cast(this.m_GridCell.get_Height()));
    var vXSize = $S00().Construct($T0C().$Cast(this.m_frameSize.X), $T0C().$Cast(this.m_frameSize.Y));
    var vOSize = $S00().Construct($T0C().$Cast(this.m_frameSize.X), $T0C().$Cast(this.m_frameSize.Y));
    var vCorner = $T06().op_Subtraction(this.m_vTableCenter, $T06().op_MultiplyScalar(vCellSize, ($T0C().$Cast(this.m_Table.m_nSide) * 0.5)));

    for (var nY = 0; nY < this.m_Table.m_nSide; nY = ((nY + 1) | 0)) {

      for (var nX = 0; nX < this.m_Table.m_nSide; nX = ((nX + 1) | 0)) {
        $T06().prototype._ctor.call(vGridPos, $T0C().$Cast(nX), $T0C().$Cast(nY));
        var vFinalPos = $T06().op_Addition(vCorner, $T06().op_Multiply(vCellSize, vGridPos));
        var vEndPos = $T06().op_Addition(vFinalPos, vCellSize);
        if (!((vMousePos.X <= vFinalPos.X) || 
            (vMousePos.X >= vEndPos.X) || 
            (vMousePos.Y <= vFinalPos.Y) || (vMousePos.Y >= vEndPos.Y))) {
          if (this.m_Table.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) === " ".charCodeAt(0)) {
            var spriteMark = new ($T0D())(null, 0, 1, 0.5);
            if (chPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) {
              var texture = this.m_Tex_X;
              var sound = this.m_soundX;
            } else {
              texture = this.m_Tex_O;
              sound = this.m_soundO;
            }
            spriteMark.Load(
              texture, 
              this.m_frameSize.MemberwiseClone(), 
              new ($T02())(2, 1), 
              null, 
              30, 
              sound
            );
            this.m_Table.ApplyMove(new ($T0A())(nX, nY, chPlayer, spriteMark));
            var result = true;
            return result;
          }
        }
      }
    }
    result = false;
    return result;
  };

  function Game1_Quit () {
    this.Exit();
  };

  function Game1_Reset () {
    this.m_currentMatchTime = +0;
    this.m_Table = $S04().Construct(3);
    this.m_increaseScore = true;
  };

  function Game1_UnloadContent () {
  };

  function Game1_Update (gameTime) {
    if ($T22().GetState($T23().One).get_Buttons().get_Back() === $T24().Pressed) {
      this.Exit();
    }
    var oMouseState = $T01().GetState();
    switch (this.m_eGameFlow.valueOf()) {
      case 0: 
        this.m_mainMenu.HandleTouch(oMouseState);
        break;

      case 1: 
        this.m_score.HandleTouch(oMouseState);
        break;

      case 2: 
        if (!((oMouseState.get_LeftButton() !== $T24().Pressed) || (this.m_oPrevMouseState.get_LeftButton() === $T24().Pressed))) {
          if (this.PlayerMove(oMouseState.MemberwiseClone(), this.m_currentPlayer)) {
            if (this.m_Table.m_eState === $T19().IsPlaying) {
              if (this.m_gameMode === $T03().OnePlayer) {
                this.m_eGameFlow = $T00().ComputerMove;
              }
              this.m_currentPlayer = ((this.m_currentPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) ? this.m_chComputer : this.m_chPlayer);
              this.m_computerMoveDelay = +($T0C().$Cast(gameTime.get_TotalGameTime().get_TotalMilliseconds()) + 1500);
            } else {
              this.m_eGameFlow = $T00().Results;
            }
          }
        }
        this.m_oPrevMouseState = oMouseState.MemberwiseClone();
        break;

      case 3: 
        if (gameTime.get_TotalGameTime().get_TotalMilliseconds() > this.m_computerMoveDelay) {
          this.ComputerMove(this.m_currentPlayer);
          this.m_currentPlayer = ((this.m_currentPlayer.charCodeAt(0) === this.m_chPlayer.charCodeAt(0)) ? this.m_chComputer : this.m_chPlayer);
          if (this.m_Table.m_eState === $T19().IsPlaying) {
            this.m_eGameFlow = $T00().PlayerMove;
          } else {
            this.m_eGameFlow = $T00().Results;
          }
        }
        break;

      case 4: 
        this.m_score.HandleTouch(oMouseState);
        if (this.m_increaseScore) {
          this.m_score.IncreaseScore(this.m_Table.m_eState.toString());
          this.m_increaseScore = false;
        }
        break;

    }
    this.m_currentMatchTime += +$T0C().$Cast(gameTime.get_TotalGameTime().get_TotalMinutes());
    $T04().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeClass($asm02.TypeRef("Microsoft.Xna.Framework.Game"), "ChalkTicTacToe.Game1", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Game1__ctor
    );

    $.Method({Static:false, Public:false}, "ComputerMove", 
      new JSIL.MethodSignature(null, [$.Char], []), 
      Game1_ComputerMove
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Game1_Draw
    );

    $.Method({Static:false, Public:true }, "handleMenuClick", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Game1_handleMenuClick
    );

    $.Method({Static:false, Public:true }, "handleScoreMenuClick", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_handleScoreMenuClick
    );

    $.Method({Static:false, Public:true }, "handleScoreRematchClick", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_handleScoreRematchClick
    );

    $.Method({Static:false, Public:true }, "handleScoreStartClick", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_handleScoreStartClick
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_LoadContent
    );

    $.Method({Static:false, Public:true }, "Minimax", 
      new JSIL.MethodSignature($.Single, [
          $asm00.TypeRef("ChalkTicTacToe.Table"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("ChalkTicTacToe.Move")]), 
          $.Single, $.Single, 
          $.Char, $.Int32
        ], []), 
      Game1_Minimax
    );

    $.Method({Static:false, Public:false}, "PlayerMove", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"), $.Char], []), 
      Game1_PlayerMove
    );

    $.Method({Static:false, Public:false}, "Quit", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_Quit
    );

    $.Method({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_Reset
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Game1_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Game1_Update
    );

    $.Field({Static:false, Public:false}, "m_graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "m_spriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "m_GridCell", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_Tex_O", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_Tex_X", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_Line", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_Background", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_BackgroundGrid", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_vTableCenter", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "m_Table", $asm00.TypeRef("ChalkTicTacToe.Table")); 
    $.Field({Static:false, Public:false}, "m_eGameFlow", $asm00.TypeRef("ChalkTicTacToe.GameFlow")); 
    $.Field({Static:false, Public:false}, "m_oPrevMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:false, Public:false}, "m_mainMenu", $asm00.TypeRef("ChalkTicTacToe.Main")); 
    $.Field({Static:false, Public:false}, "m_score", $asm00.TypeRef("ChalkTicTacToe.Score")); 
    $.Field({Static:false, Public:false}, "m_frameSize", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "m_spriteLineH", $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")); 
    $.Field({Static:false, Public:false}, "m_spriteLineV", $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")); 
    $.Field({Static:false, Public:false}, "m_spriteLineDL", $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")); 
    $.Field({Static:false, Public:false}, "m_spriteLineDR", $asm00.TypeRef("ChalkTicTacToe.AnimatedTexture")); 
    $.Field({Static:false, Public:false}, "m_soundX", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "m_soundO", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "m_soundClick", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "m_gameMode", $asm00.TypeRef("ChalkTicTacToe.GameMode")); 
    $.Field({Static:false, Public:false}, "m_computerMoveDelay", $.Single); 
    $.Field({Static:false, Public:false}, "m_currentMatchTime", $.Single); 
    $.Field({Static:false, Public:false}, "m_currentPlayer", $.Char); 
    $.Field({Static:false, Public:false}, "m_chComputer", $.Char); 
    $.Field({Static:false, Public:false}, "m_chPlayer", $.Char); 
    $.Field({Static:false, Public:false}, "m_increaseScore", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Score$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.ChalkTicTacToe.Game1)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm06.System.String))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.ChalkTicTacToe.Button)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.ChalkTicTacToe.Button_BState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm06.TypeRef("System.Single"), $asm06.TypeRef("System.Single")]))) ();
  };

  function Score__ctor (game) {
    this.m_scoreMessagesSprite = JSIL.Array.New($T01(), 5);
    this.m_scoreMessages = JSIL.Array.New($T02(), 5);
    this.m_scoreX = 0;
    this.m_scoreO = 0;
    this.m_scoreDraw = 0;
    this.m_game = game;
    this.m_scoreFont = this.m_game.get_Content().Load$b1($T03())("SpriteFontScore");
    this.m_scoreMessages = JSIL.Array.New($T02(), ["ScoreTurnX", "ScoreTurnO", "ScoreWinX", "ScoreWinO", "ScoreDraw"]);

    for (var i = 0; i < this.m_scoreMessages.length; i = ((i + 1) | 0)) {
      this.m_scoreMessagesSprite[i] = this.m_game.get_Content().Load$b1($T01())(("sprites/" + this.m_scoreMessages[i]));
    }
    this.m_scoreSprite = this.m_game.get_Content().Load$b1($T01())("sprites/MenuScore");
    this.m_scoreRectangle = new ($T09())(20, 50, this.m_scoreSprite.get_Width(), this.m_scoreSprite.get_Height());
    this.m_scoreStartButton = new ($T0A())(30, 320, this.m_game.get_Content().Load$b1($T01())("sprites/ScoreStart"), $T0B().get_White().MemberwiseClone(), $T0B().get_Gainsboro().MemberwiseClone(), $T0B().get_White().MemberwiseClone());
    this.m_scoreMenuButton = new ($T0A())(30, 400, this.m_game.get_Content().Load$b1($T01())("sprites/ScoreMenu"), $T0B().get_White().MemberwiseClone(), $T0B().get_Gainsboro().MemberwiseClone(), $T0B().get_White().MemberwiseClone());
    this.m_scoreRematchButton = new ($T0A())(150, 400, this.m_game.get_Content().Load$b1($T01())("sprites/ScoreRematch"), $T0B().get_White().MemberwiseClone(), $T0B().get_Gainsboro().MemberwiseClone(), $T0B().get_White().MemberwiseClone());
  };

  function Score_Draw (spriteBatch, gameTime) {
    spriteBatch.DrawRect(this.m_scoreSprite, this.m_scoreRectangle, $T0B().get_White());
    spriteBatch.DrawString(this.m_scoreFont, (this.m_scoreX).toString(), $S00().Construct($T0F().$Cast(((this.m_scoreRectangle.X + 110) | 0)), $T0F().$Cast(((this.m_scoreRectangle.Y + 70) | 0))), $T0B().get_Gainsboro());
    spriteBatch.DrawString(this.m_scoreFont, (this.m_scoreO).toString(), $S00().Construct($T0F().$Cast(((this.m_scoreRectangle.X + 112) | 0)), $T0F().$Cast(((this.m_scoreRectangle.Y + 125) | 0))), $T0B().get_Gainsboro());
    spriteBatch.DrawString(this.m_scoreFont, (this.m_scoreDraw).toString(), $S00().Construct($T0F().$Cast(((this.m_scoreRectangle.X + 150) | 0)), $T0F().$Cast(((this.m_scoreRectangle.Y + 180) | 0))), $T0B().get_Gainsboro());
  };

  function Score_DrawMenuButton (spriteBatch, gameTime) {
    this.m_scoreRematchButton.Draw(spriteBatch, gameTime);
    this.m_scoreMenuButton.Draw(spriteBatch, gameTime);
  };

  function Score_DrawMessage (spriteBatch, gameTime, index) {
    spriteBatch.DrawRect(
      this.m_scoreMessagesSprite[index], 
      new ($T09())(30, 320, this.m_scoreMessagesSprite[index].get_Width(), this.m_scoreMessagesSprite[index].get_Height()), 
      $T0B().get_White()
    );
  };

  function Score_DrawStartButton (spriteBatch, gameTime) {
    this.m_scoreStartButton.Draw(spriteBatch, gameTime);
  };

  function Score_HandleTouch (touch) {
    if (!((this.m_scoreStartButton === null) || 
        !this.m_scoreStartButton.Touched(touch) || (this.m_scoreStartButton.m_state !== $T11().DOWN))) {
      this.m_game.handleScoreStartClick();
    } else if (!((this.m_scoreRematchButton === null) || 
        !this.m_scoreRematchButton.Touched(touch) || (this.m_scoreRematchButton.m_state !== $T11().DOWN))) {
      this.m_game.handleScoreRematchClick();
    } else if (!((this.m_scoreMenuButton === null) || 
        !this.m_scoreMenuButton.Touched(touch) || (this.m_scoreMenuButton.m_state !== $T11().DOWN))) {
      this.m_game.handleScoreMenuClick();
    }
  };

  function Score_IncreaseScore (type) {
    if (type !== null) {
      if (!(type == "PlayerXWins")) {
        if (!(type == "PlayerOWins")) {
          if (type == "IsDraw") {
            this.m_scoreDraw = ((this.m_scoreDraw + 1) | 0);
          }
        } else {
          this.m_scoreO = ((this.m_scoreO + 1) | 0);
        }
      } else {
        this.m_scoreX = ((this.m_scoreX + 1) | 0);
      }
    }
  };

  function Score_ResetScore () {
    this.m_scoreX = (this.m_scoreO = (this.m_scoreDraw = 0));
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.Score", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("ChalkTicTacToe.Game1")], []), 
      Score__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Score_Draw
    );

    $.Method({Static:false, Public:true }, "DrawMenuButton", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Score_DrawMenuButton
    );

    $.Method({Static:false, Public:true }, "DrawMessage", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), 
          $.Int32
        ], []), 
      Score_DrawMessage
    );

    $.Method({Static:false, Public:true }, "DrawStartButton", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Score_DrawStartButton
    );

    $.Method({Static:false, Public:true }, "HandleTouch", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")], []), 
      Score_HandleTouch
    );

    $.Method({Static:false, Public:true }, "IncreaseScore", 
      new JSIL.MethodSignature(null, [$.String], []), 
      Score_IncreaseScore
    );

    $.Method({Static:false, Public:true }, "ResetScore", 
      new JSIL.MethodSignature(null, [], []), 
      Score_ResetScore
    );

    $.Field({Static:false, Public:false}, "m_scoreRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:false}, "m_scoreSprite", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "m_scoreMessagesSprite", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])); 
    $.Field({Static:false, Public:false}, "m_scoreMessages", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "m_scoreRematchButton", $asm00.TypeRef("ChalkTicTacToe.Button")); 
    $.Field({Static:false, Public:false}, "m_scoreMenuButton", $asm00.TypeRef("ChalkTicTacToe.Button")); 
    $.Field({Static:false, Public:false}, "m_scoreStartButton", $asm00.TypeRef("ChalkTicTacToe.Button")); 
    $.Field({Static:false, Public:false}, "m_game", $asm00.TypeRef("ChalkTicTacToe.Game1")); 
    $.Field({Static:false, Public:false}, "m_scoreFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "m_scoreX", $.Int32); 
    $.Field({Static:false, Public:false}, "m_scoreO", $.Int32); 
    $.Field({Static:false, Public:false}, "m_scoreDraw", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Table$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.ChalkTicTacToe.GameState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.ChalkTicTacToe.Move)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm00.ChalkTicTacToe.Move))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Void)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Collections.Generic.List$b1.Of($asm00.ChalkTicTacToe.Move))) ();
  };

  function Table__ctor$00 (nSide) {
    this.m_nSide = 3;
    this.m_eState = $T01().IsPlaying;
    this.m_nSide = nSide;
    this.m_achCells = JSIL.MultidimensionalArray.New($T02(), this.m_nSide, this.m_nSide);

    for (var nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {

      for (var nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
        this.m_achCells.Set(nX, nY, new ($T02())(0, 0, " ", null));
      }
    }
  };

  function Table__ctor$01 (Original) {
    this.m_nSide = 3;
    this.m_eState = $T01().IsPlaying;
    this.m_nSide = Original.m_nSide;
    this.m_achCells = JSIL.MultidimensionalArray.New($T02(), this.m_nSide, this.m_nSide);

    for (var nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {

      for (var nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
        this.m_achCells.Set(nX, nY, Original.m_achCells.Get(nX, nY));
      }
    }
  };

  function Table_ApplyMove (oMove) {
    this.m_achCells.Set(oMove.m_nX, oMove.m_nY, oMove);
    this.UpdateGameState();
  };

  function Table_CheckPlayerWins (chPlayer) {

    for (var nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {
      var bnComplete = true;

    $loop1: 
      for (var nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
        if (this.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) !== chPlayer.charCodeAt(0)) {
          bnComplete = false;
          break $loop1;
        }
      }
      if (bnComplete) {
        var result = (JSIL.ConcatString("L", nY));
        return result;
      }
    }

    for (nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
      bnComplete = true;

    $loop3: 
      for (nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {
        if (this.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) !== chPlayer.charCodeAt(0)) {
          bnComplete = false;
          break $loop3;
        }
      }
      if (bnComplete) {
        result = (JSIL.ConcatString("C", nX));
        return result;
      }
    }
    bnComplete = true;

  $loop4: 
    for (var nC = 0; nC < this.m_nSide; nC = ((nC + 1) | 0)) {
      if (this.m_achCells.Get(nC, nC).m_chPlayer.charCodeAt(0) !== chPlayer.charCodeAt(0)) {
        bnComplete = false;
        break $loop4;
      }
    }
    if (bnComplete) {
      result = "DL";
      return result;
    }
    bnComplete = true;

  $loop5: 
    for (nC = 0; nC < this.m_nSide; nC = ((nC + 1) | 0)) {
      if ((this.m_achCells.Get(((((this.m_nSide - nC) | 0) - 1) | 0), nC).m_chPlayer).charCodeAt(0) !== chPlayer.charCodeAt(0)) {
        bnComplete = false;
        break $loop5;
      }
    }
    if (bnComplete) {
      result = "DR";
      return result;
    }
    result = null;
    return result;
  };

  function Table_EvaluateTable (chPlayer) {
    if (!((chPlayer.charCodeAt(0) !== "X".charCodeAt(0)) || (this.m_eState !== $T01().PlayerXWins))) {
      var result = +1;
    } else if (!((chPlayer.charCodeAt(0) !== "O".charCodeAt(0)) || (this.m_eState !== $T01().PlayerOWins))) {
      result = +1;
    } else if (!((chPlayer.charCodeAt(0) !== "X".charCodeAt(0)) || (this.m_eState !== $T01().PlayerOWins))) {
      result = +-1;
    } else if (!((chPlayer.charCodeAt(0) !== "O".charCodeAt(0)) || (this.m_eState !== $T01().PlayerXWins))) {
      result = +-1;
    } else {
      result = +0;
    }
    return +result;
  };

  function Table_GetAvailableMoves (lMoves, chPlayer) {

    for (var nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {

      for (var nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
        if (this.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) === " ".charCodeAt(0)) {
          lMoves.Add(new ($T02())(nX, nY, chPlayer, null));
        }
      }
    }
  };

  function Table_TestForEmptyCells () {

    for (var nY = 0; nY < this.m_nSide; nY = ((nY + 1) | 0)) {

      for (var nX = 0; nX < this.m_nSide; nX = ((nX + 1) | 0)) {
        if (this.m_achCells.Get(nX, nY).m_chPlayer.charCodeAt(0) === " ".charCodeAt(0)) {
          var result = true;
          return result;
        }
      }
    }
    result = false;
    return result;
  };

  function Table_UpdateGameState () {
    if (this.CheckPlayerWins("X") !== null) {
      this.m_eState = $T01().PlayerXWins;
    } else if (this.CheckPlayerWins("O") !== null) {
      this.m_eState = $T01().PlayerOWins;
    } else if (this.TestForEmptyCells()) {
      this.m_eState = $T01().IsPlaying;
    } else {
      this.m_eState = $T01().IsDraw;
    }
  };

  JSIL.MakeClass($asm06.TypeRef("System.Object"), "ChalkTicTacToe.Table", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Table__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], []), 
      Table__ctor$01
    );

    $.Method({Static:false, Public:true }, "ApplyMove", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("ChalkTicTacToe.Move")], []), 
      Table_ApplyMove
    );

    $.Method({Static:false, Public:true }, "CheckPlayerWins", 
      new JSIL.MethodSignature($.String, [$.Char], []), 
      Table_CheckPlayerWins
    );

    $.Method({Static:false, Public:true }, "EvaluateTable", 
      new JSIL.MethodSignature($.Single, [$.Char], []), 
      Table_EvaluateTable
    );

    $.Method({Static:false, Public:true }, "GetAvailableMoves", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("ChalkTicTacToe.Move")]), $.Char], []), 
      Table_GetAvailableMoves
    );

    $.Method({Static:false, Public:false}, "TestForEmptyCells", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Table_TestForEmptyCells
    );

    $.Method({Static:false, Public:false}, "UpdateGameState", 
      new JSIL.MethodSignature(null, [], []), 
      Table_UpdateGameState
    );

    $.Field({Static:false, Public:true }, "m_achCells", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("ChalkTicTacToe.Move")])); 
    $.Field({Static:false, Public:true }, "m_nSide", $.Int32); 
    $.Field({Static:false, Public:true }, "m_eState", $asm00.TypeRef("ChalkTicTacToe.GameState")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

